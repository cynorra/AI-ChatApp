{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { OllamaAPI } from '../services/ollamaAPI';\nconst INITIAL_MESSAGE = {\n  id: '1',\n  text: 'Merhaba! Ben Ollama ile çalışan AI asistanınızım. Size nasıl yardımcı olabilirim?',\n  isUser: false,\n  timestamp: new Date()\n};\nexport const useChat = () => {\n  _s();\n  const [messages, setMessages] = useState([INITIAL_MESSAGE]);\n  const [isLoading, setIsLoading] = useState(false);\n  const sendMessage = useCallback(async text => {\n    if (!text.trim() || isLoading) return;\n    const userMessage = {\n      id: Date.now().toString(),\n      text: text.trim(),\n      isUser: true,\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    try {\n      const response = await OllamaAPI.generateResponse(text.trim());\n      const aiMessage = {\n        id: (Date.now() + 1).toString(),\n        text: response,\n        isUser: false,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, aiMessage]);\n    } catch (error) {\n      const errorMessage = {\n        id: (Date.now() + 1).toString(),\n        text: error instanceof Error ? error.message : 'Bilinmeyen hata oluştu.',\n        isUser: false,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [isLoading]);\n  const clearChat = useCallback(() => {\n    setMessages([INITIAL_MESSAGE]);\n    OllamaAPI.clearContext();\n  }, []);\n  return {\n    messages,\n    isLoading,\n    sendMessage,\n    clearChat\n  };\n};\n_s(useChat, \"AuIqZ/otYks6L02SDd3AHQKGOYg=\");","map":{"version":3,"names":["useState","useCallback","OllamaAPI","INITIAL_MESSAGE","id","text","isUser","timestamp","Date","useChat","_s","messages","setMessages","isLoading","setIsLoading","sendMessage","trim","userMessage","now","toString","prev","response","generateResponse","aiMessage","error","errorMessage","Error","message","clearChat","clearContext"],"sources":["C:/Users/erens/Desktop/aichat/src/hooks/useChat.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { Message } from '../types';\r\nimport { OllamaAPI } from '../services/ollamaAPI';\r\n\r\nconst INITIAL_MESSAGE: Message = {\r\n  id: '1',\r\n  text: 'Merhaba! Ben Ollama ile çalışan AI asistanınızım. Size nasıl yardımcı olabilirim?',\r\n  isUser: false,\r\n  timestamp: new Date()\r\n};\r\n\r\nexport const useChat = () => {\r\n  const [messages, setMessages] = useState<Message[]>([INITIAL_MESSAGE]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const sendMessage = useCallback(async (text: string) => {\r\n    if (!text.trim() || isLoading) return;\r\n\r\n    const userMessage: Message = {\r\n      id: Date.now().toString(),\r\n      text: text.trim(),\r\n      isUser: true,\r\n      timestamp: new Date()\r\n    };\r\n\r\n    setMessages(prev => [...prev, userMessage]);\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const response = await OllamaAPI.generateResponse(text.trim());\r\n      \r\n      const aiMessage: Message = {\r\n        id: (Date.now() + 1).toString(),\r\n        text: response,\r\n        isUser: false,\r\n        timestamp: new Date()\r\n      };\r\n\r\n      setMessages(prev => [...prev, aiMessage]);\r\n    } catch (error) {\r\n      const errorMessage: Message = {\r\n        id: (Date.now() + 1).toString(),\r\n        text: error instanceof Error ? error.message : 'Bilinmeyen hata oluştu.',\r\n        isUser: false,\r\n        timestamp: new Date()\r\n      };\r\n      setMessages(prev => [...prev, errorMessage]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [isLoading]);\r\n\r\n  const clearChat = useCallback(() => {\r\n    setMessages([INITIAL_MESSAGE]);\r\n    OllamaAPI.clearContext();\r\n  }, []);\r\n\r\n  return {\r\n    messages,\r\n    isLoading,\r\n    sendMessage,\r\n    clearChat\r\n  };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAE7C,SAASC,SAAS,QAAQ,uBAAuB;AAEjD,MAAMC,eAAwB,GAAG;EAC/BC,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,mFAAmF;EACzFC,MAAM,EAAE,KAAK;EACbC,SAAS,EAAE,IAAIC,IAAI,CAAC;AACtB,CAAC;AAED,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAY,CAACG,eAAe,CAAC,CAAC;EACtE,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMe,WAAW,GAAGd,WAAW,CAAC,MAAOI,IAAY,IAAK;IACtD,IAAI,CAACA,IAAI,CAACW,IAAI,CAAC,CAAC,IAAIH,SAAS,EAAE;IAE/B,MAAMI,WAAoB,GAAG;MAC3Bb,EAAE,EAAEI,IAAI,CAACU,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzBd,IAAI,EAAEA,IAAI,CAACW,IAAI,CAAC,CAAC;MACjBV,MAAM,EAAE,IAAI;MACZC,SAAS,EAAE,IAAIC,IAAI,CAAC;IACtB,CAAC;IAEDI,WAAW,CAACQ,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEH,WAAW,CAAC,CAAC;IAC3CH,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACF,MAAMO,QAAQ,GAAG,MAAMnB,SAAS,CAACoB,gBAAgB,CAACjB,IAAI,CAACW,IAAI,CAAC,CAAC,CAAC;MAE9D,MAAMO,SAAkB,GAAG;QACzBnB,EAAE,EAAE,CAACI,IAAI,CAACU,GAAG,CAAC,CAAC,GAAG,CAAC,EAAEC,QAAQ,CAAC,CAAC;QAC/Bd,IAAI,EAAEgB,QAAQ;QACdf,MAAM,EAAE,KAAK;QACbC,SAAS,EAAE,IAAIC,IAAI,CAAC;MACtB,CAAC;MAEDI,WAAW,CAACQ,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEG,SAAS,CAAC,CAAC;IAC3C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAMC,YAAqB,GAAG;QAC5BrB,EAAE,EAAE,CAACI,IAAI,CAACU,GAAG,CAAC,CAAC,GAAG,CAAC,EAAEC,QAAQ,CAAC,CAAC;QAC/Bd,IAAI,EAAEmB,KAAK,YAAYE,KAAK,GAAGF,KAAK,CAACG,OAAO,GAAG,yBAAyB;QACxErB,MAAM,EAAE,KAAK;QACbC,SAAS,EAAE,IAAIC,IAAI,CAAC;MACtB,CAAC;MACDI,WAAW,CAACQ,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEK,YAAY,CAAC,CAAC;IAC9C,CAAC,SAAS;MACRX,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC,EAAE,CAACD,SAAS,CAAC,CAAC;EAEf,MAAMe,SAAS,GAAG3B,WAAW,CAAC,MAAM;IAClCW,WAAW,CAAC,CAACT,eAAe,CAAC,CAAC;IAC9BD,SAAS,CAAC2B,YAAY,CAAC,CAAC;EAC1B,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLlB,QAAQ;IACRE,SAAS;IACTE,WAAW;IACXa;EACF,CAAC;AACH,CAAC;AAAClB,EAAA,CApDWD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}